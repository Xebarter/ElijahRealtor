import { readdirSync, writeFileSync, existsSync } from 'fs';
import { join, extname, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const publicDir = join(__dirname, '../public');
const outputFile = join(__dirname, '../src/heroImages.ts');
const exts = ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.svg', '.avif', '.bmp'];

try {
  if (!existsSync(publicDir)) {
    console.log(`Public directory ${publicDir} does not exist. Creating empty hero images array.`);
    const content = `// Auto-generated by scripts/generateHeroImages.ts\nexport const heroImages: string[] = [];\n`;
    writeFileSync(outputFile, content);
    console.log(`Generated ${outputFile} with 0 images.`);
    process.exit(0);
  }

  const files = readdirSync(publicDir)
    .filter(f => exts.includes(extname(f).toLowerCase()))
    .map(f => `/${f}`);

  const content = `// Auto-generated by scripts/generateHeroImages.ts\nexport const heroImages: string[] = ${JSON.stringify(files, null, 2)};\n`;

  writeFileSync(outputFile, content);
  console.log(`Generated ${outputFile} with ${files.length} images.`);
} catch (error) {
  console.error('Error generating hero images:', error);
  // Create a fallback file to prevent build failure
  const content = `// Auto-generated by scripts/generateHeroImages.ts\nexport const heroImages: string[] = [];\n`;
  writeFileSync(outputFile, content);
  console.log(`Generated fallback ${outputFile} with 0 images.`);
} 